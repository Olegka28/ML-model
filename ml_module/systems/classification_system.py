#!/usr/bin/env python3
"""
üéØ ClassificationSystem - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

from ..core.base_system import BaseSystem
from ..utils.config import Config
from typing import Optional, Dict, Any, List
import numpy as np
import pandas as pd
from imblearn.over_sampling import SMOTE

class ClassificationSystem(BaseSystem):
    """
    –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """
    def __init__(self, config: Config):
        super().__init__(config)
        self.logger.info("üéØ ClassificationSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def create_classification_target(self, df: pd.DataFrame, percent: float = 0.025, horizon: int = 20) -> pd.Series:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞: 1 –µ—Å–ª–∏ —Ä–æ—Å—Ç >= percent –∑–∞ horizon, –∏–Ω–∞—á–µ 0
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            percent: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.025 = 2.5%)
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
        Returns:
            Series —Å –±–∏–Ω–∞—Ä–Ω—ã–º —Ç–∞—Ä–≥–µ—Ç–æ–º
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if df is None or df.empty:
            raise ValueError("DataFrame cannot be None or empty")
        
        if 'close' not in df.columns:
            raise ValueError("DataFrame must contain 'close' column")
        
        if not isinstance(percent, (int, float)) or percent <= 0:
            raise ValueError("Percent must be a positive number")
        
        if not isinstance(horizon, int) or horizon <= 0:
            raise ValueError("Horizon must be a positive integer")
        
        self.logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞: {percent*100}% —Ä–æ—Å—Ç –∑–∞ {horizon} –±–∞—Ä–æ–≤")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç
            future_price = df['close'].shift(-horizon)
            target = ((future_price - df['close']) / df['close'] >= percent).astype(int)
            
            # –£–¥–∞–ª—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
            target = target.dropna()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞—Ä–≥–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if len(target) == 0:
                raise ValueError(f"Target is empty after processing for {percent*100}% growth with horizon {horizon}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤
            class_counts = target.value_counts()
            self.logger.info(f"üìä –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤: {dict(class_counts)}")
            
            self.logger.info(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç —Å–æ–∑–¥–∞–Ω: {len(target)} –∑–Ω–∞—á–µ–Ω–∏–π")
            return target
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞: {e}")
            raise

    def run_experiment(self, symbol: str, percent: float = 0.025, horizon: int = 20) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            percent: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.025 = 2.5%)
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
        Returns:
            –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            raise ValueError("Symbol must be a non-empty string")
        
        if not isinstance(percent, (int, float)) or percent <= 0:
            raise ValueError("Percent must be a positive number")
        
        if not isinstance(horizon, int) or horizon <= 0:
            raise ValueError("Horizon must be a positive integer")
        
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {symbol}")
        self.logger.info(f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞: {percent*100}%, –≥–æ—Ä–∏–∑–æ–Ω—Ç: {horizon}")
        
        try:
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.logger.info("üìä –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            data = self.load_and_validate_data(symbol, self.config.data.timeframes)
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            self.logger.info("üî¨ –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
            features = self.generate_and_validate_features(data)
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞
            self.logger.info("üéØ –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∞...")
            target = self.create_classification_target(features, percent, horizon)
            
            # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.logger.info("üîß –®–∞–≥ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            X, y, feature_names = self.prepare_training_data(features, target)
            
            # 5. –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤ (SMOTE)
            self.logger.info("‚öñÔ∏è –®–∞–≥ 5: –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤ (SMOTE)...")
            sm = SMOTE(random_state=42)
            X_bal, y_bal = sm.fit_resample(X, y)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
            original_counts = np.bincount(y)
            balanced_counts = np.bincount(y_bal)
            self.logger.info(f"üìä –î–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {dict(zip(range(len(original_counts)), original_counts))}")
            self.logger.info(f"üìä –ü–æ—Å–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {dict(zip(range(len(balanced_counts)), balanced_counts))}")
            
            # 6. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='classification')
            self.logger.info("ü§ñ –®–∞–≥ 6: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            model, metadata = self.train_model(X_bal, y_bal, task='classification')
            
            # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='classification')
            self.logger.info("üíæ –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            self.save_model(model, metadata, symbol, task='classification')
            
            # 8. –í–æ–∑–≤—Ä–∞—Ç –º–µ—Ç—Ä–∏–∫
            self.logger.info("‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return metadata
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
            raise

    def predict_latest(self, symbol: str, latest_data: pd.DataFrame, 
                      timeframe: str = '15m') -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            latest_data: DataFrame —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '15m')
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            self.logger.error("Symbol must be a non-empty string")
            return None
        
        if latest_data is None or latest_data.empty:
            self.logger.error("Latest data cannot be None or empty")
            return None
        
        if not timeframe or not isinstance(timeframe, str):
            self.logger.error("Timeframe must be a non-empty string")
            return None
        
        self.logger.info(f"üîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {symbol} ({timeframe})")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            self.logger.info("üî¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
            features = self.feature_manager.generate_features({timeframe: latest_data})
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='classification')
            prediction, confidence = self.predict(symbol, features, task='classification')
            
            if prediction is None:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {symbol}")
                return None
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction_class = int(prediction)
            prediction_label = "–†–û–°–¢" if prediction_class == 1 else "–ü–ê–î–ï–ù–ò–ï"
            
            result = {
                'prediction': prediction_class,
                'prediction_label': prediction_label,
                'confidence': confidence,
                'symbol': symbol,
                'timeframe': timeframe,
                'timestamp': pd.Timestamp.now().isoformat()
            }
            
            self.logger.info(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {prediction_label} (–∫–ª–∞—Å—Å {prediction_class}), —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
            return None
    
    def get_model_info(self, symbol: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            self.logger.error("Symbol must be a non-empty string")
            return None
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='classification')
            model, metadata = self.load_model(symbol, task='classification')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = {
                'symbol': symbol,
                'task': 'classification',
                'model_type': metadata.get('model_type', 'unknown'),
                'features_count': metadata.get('features_count', 0),
                'training_date': metadata.get('saved_at', 'unknown'),
                'metrics': {
                    'accuracy': metadata.get('accuracy', 0),
                    'f1_score': metadata.get('f1_score', 0),
                    'precision': metadata.get('precision', 0),
                    'recall': metadata.get('recall', 0)
                },
                'target_percent': metadata.get('target_percent', 0),
                'horizon': metadata.get('horizon', 0),
                'model_score': metadata.get('model_score', 0)
            }
            
            self.logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ {symbol} –ø–æ–ª—É—á–µ–Ω–∞")
            return model_info
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ {symbol}: {e}")
            return None
    
    def compare_models(self, symbol: str) -> Optional[Dict[str, Any]]:
        """
        –°—Ä–∞–≤–Ω–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            self.logger.error("Symbol must be a non-empty string")
            return None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ModelManager –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='classification')
            comparison = self.model_manager.compare_models(symbol, task='classification')
            
            self.logger.info(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ {symbol} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            return comparison
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ {symbol}: {e}")
            return None
    
    def get_model_history(self, symbol: str) -> Optional[List[Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            
        Returns:
            –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            self.logger.error("Symbol must be a non-empty string")
            return None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ModelManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='classification')
            history = self.model_manager.get_model_history(symbol, task='classification')
            
            self.logger.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ {symbol} –ø–æ–ª—É—á–µ–Ω–∞")
            return history
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ {symbol}: {e}")
            return None
    
    def get_class_distribution(self, symbol: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            
        Returns:
            –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            self.logger.error("Symbol must be a non-empty string")
            return None
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            model, metadata = self.load_model(symbol, task='classification')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–æ–≤
            class_distribution = {
                'symbol': symbol,
                'task': 'classification',
                'target_percent': metadata.get('target_percent', 0),
                'horizon': metadata.get('horizon', 0),
                'original_class_counts': metadata.get('original_class_counts', {}),
                'balanced_class_counts': metadata.get('balanced_class_counts', {}),
                'class_balance_ratio': metadata.get('class_balance_ratio', 0)
            }
            
            self.logger.info(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è {symbol} –ø–æ–ª—É—á–µ–Ω–æ")
            return class_distribution
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è {symbol}: {e}")
            return None 