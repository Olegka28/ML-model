#!/usr/bin/env python3
"""
üìà RegressionSystem - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
"""

from ..core.base_system import BaseSystem
from ..utils.config import Config
from typing import Optional, Dict, Any, List
import numpy as np
import pandas as pd

class RegressionSystem(BaseSystem):
    """
    –°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """
    def __init__(self, config: Config):
        super().__init__(config)
        self.logger.info("üìà RegressionSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def run_experiment(self, symbol: str, target_type: str = 'crypto_clipped', horizon: int = 10) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            target_type: –¢–∏–ø —Ç–∞—Ä–≥–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: crypto_clipped)
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
        Returns:
            –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            raise ValueError("Symbol must be a non-empty string")
        
        if not target_type or not isinstance(target_type, str):
            raise ValueError("Target type must be a non-empty string")
        
        if not isinstance(horizon, int) or horizon <= 0:
            raise ValueError("Horizon must be a positive integer")
        
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è {symbol}")
        self.logger.info(f"üéØ –¢–∞—Ä–≥–µ—Ç: {target_type}, –≥–æ—Ä–∏–∑–æ–Ω—Ç: {horizon}")
        
        try:
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.logger.info("üìä –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            data = self.load_and_validate_data(symbol, self.config.data.timeframes)
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            self.logger.info("üî¨ –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
            features = self.generate_and_validate_features(data)
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞
            self.logger.info("üéØ –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞...")
            target = self.create_target(data['15m'], target_type, horizon)
            
            # 4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            if self.config.features.use_feature_selection:
                self.logger.info("üîç –®–∞–≥ 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
                features = self.generate_and_select_features(data, target)
            else:
                self.logger.info("üîç –®–∞–≥ 4: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
            
            # 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            self.logger.info("üîß –®–∞–≥ 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            X, y, feature_names = self.prepare_training_data(features, target)
            
            # 6. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='regression')
            self.logger.info("ü§ñ –®–∞–≥ 6: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            model, metadata = self.train_model(X, y, feature_names, task='regression')
            
            # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='regression')
            self.logger.info("üíæ –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            model_path = self.save_model(model, metadata, symbol, task='regression')
            
            # 7. –í–æ–∑–≤—Ä–∞—Ç –º–µ—Ç—Ä–∏–∫
            self.logger.info("‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return metadata
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ –¥–ª—è {symbol}: {e}")
            raise

    def predict_latest(self, symbol: str, latest_data: pd.DataFrame, 
                      timeframe: str = '15m') -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            latest_data: DataFrame —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '15m')
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            self.logger.error("Symbol must be a non-empty string")
            return None
        
        if latest_data is None or latest_data.empty:
            self.logger.error("Latest data cannot be None or empty")
            return None
        
        if not timeframe or not isinstance(timeframe, str):
            self.logger.error("Timeframe must be a non-empty string")
            return None
        
        self.logger.info(f"üîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {symbol} ({timeframe})")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            model, metadata = self.load_model(symbol, task='regression')
            expected_features = metadata.get('features', [])
            
            if not expected_features:
                self.logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            timeframes_needed = set()
            for feature in expected_features:
                if '_1h' in feature:
                    timeframes_needed.add('1h')
                elif '_4h' in feature:
                    timeframes_needed.add('4h')
                elif '_1d' in feature:
                    timeframes_needed.add('1d')
                else:
                    timeframes_needed.add('15m')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            self.logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {list(timeframes_needed)}")
            data = self.load_and_validate_data(symbol, list(timeframes_needed))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            self.logger.info("üî¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
            features = self.feature_manager.generate_features(data)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
            self.logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {len(expected_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            missing_features = set(expected_features) - set(features.columns)
            if missing_features:
                self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing_features}")
                self.logger.error(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {list(features.columns)[:10]}...")
                return None
            
            features_filtered = features[expected_features]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction, confidence = self.predict(symbol, features_filtered, task='regression')
            
            if prediction is None:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {symbol}")
                return None
            
            result = {
                'prediction': prediction,
                'confidence': confidence,
                'symbol': symbol,
                'timeframe': timeframe,
                'timestamp': pd.Timestamp.now().isoformat()
            }
            
            self.logger.info(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {prediction:.6f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {symbol}: {e}")
            return None
    
    def get_model_info(self, symbol: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            self.logger.error("Symbol must be a non-empty string")
            return None
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='regression')
            model, metadata = self.load_model(symbol, task='regression')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = {
                'symbol': symbol,
                'task': 'regression',
                'model_type': metadata.get('model_type', 'unknown'),
                'features_count': metadata.get('features_count', 0),
                'training_date': metadata.get('saved_at', 'unknown'),
                'metrics': {
                    'rmse': metadata.get('rmse', 0),
                    'mae': metadata.get('mae', 0),
                    'r2': metadata.get('r2', 0)
                },
                'target_type': metadata.get('target_type', 'unknown'),
                'horizon': metadata.get('horizon', 0),
                'model_score': metadata.get('model_score', 0)
            }
            
            self.logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ {symbol} –ø–æ–ª—É—á–µ–Ω–∞")
            return model_info
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ {symbol}: {e}")
            return None
    
    def compare_models(self, symbol: str) -> Optional[Dict[str, Any]]:
        """
        –°—Ä–∞–≤–Ω–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            self.logger.error("Symbol must be a non-empty string")
            return None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ModelManager –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='regression')
            comparison = self.model_manager.compare_models(symbol, task='regression')
            
            self.logger.info(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π {symbol} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            return comparison
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π {symbol}: {e}")
            return None
    
    def get_model_history(self, symbol: str) -> Optional[List[Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            
        Returns:
            –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not symbol or not isinstance(symbol, str):
            self.logger.error("Symbol must be a non-empty string")
            return None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ModelManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω task='regression')
            history = self.model_manager.get_model_history(symbol, task='regression')
            
            self.logger.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π {symbol} –ø–æ–ª—É—á–µ–Ω–∞")
            return history
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π {symbol}: {e}")
            return None 