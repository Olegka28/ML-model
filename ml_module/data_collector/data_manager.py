#!/usr/bin/env python3
"""
üìä DataManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏

–ó–∞–≥—Ä—É–∑–∫–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.
"""

import os
import pickle
import hashlib
from typing import Dict, List, Optional, Any
from pathlib import Path
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

from ..utils.config import Config
from ..utils.logger import Logger
from ..utils.validators import DataValidator, ValidationError
from .data_collector import DataCollector

class DataManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ó–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
    - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    - –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, config: Config):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        """
        self.config = config
        self.collector = DataCollector()
        self.logger = Logger('DataManager', level=config.log_level)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.data_root = Path(config.data_root)
        self.cache_root = Path(config.cache_root)
        self.data_root.mkdir(parents=True, exist_ok=True)
        self.cache_root.mkdir(parents=True, exist_ok=True)
        
        # –ö—ç—à –≤ –ø–∞–º—è—Ç–∏
        self._memory_cache = {}
        self._cache_metadata = {}
    
    def normalize_symbol(self, symbol: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (SOLUSDT, SOL_USDT, SOL/USDT)
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è API (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOL/USDT)
        """
        # –ï—Å–ª–∏ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if '/' in symbol:
            return symbol
        
        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç _, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ /
        if '_' in symbol:
            return symbol.replace('_', '/')
        
        # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º / –ø–µ—Ä–µ–¥ USDT
        return symbol.replace('USDT', '/USDT')
    
    def symbol_to_filename(self, symbol: str) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ –∏–º—è —Ñ–∞–π–ª–∞
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            
        Returns:
            –ò–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOL_USDT)
        """
        # –°–Ω–∞—á–∞–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        normalized = self.normalize_symbol(symbol)
        # –ó–∞—Ç–µ–º –∑–∞–º–µ–Ω—è–µ–º / –Ω–∞ _ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        return normalized.replace('/', '_')
    
    def get_data_path(self, symbol: str, timeframe: str, period_info: Optional[str] = None) -> Path:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            period_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–∏–æ–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2years", "4years")
            
        Returns:
            –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
        """
        symbol_file = self.symbol_to_filename(symbol)
        
        if period_info:
            return self.data_root / f"{symbol_file}_{timeframe}_{period_info}.csv"
        else:
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            years_back = self.config.data.years_back
            return self.data_root / f"{symbol_file}_{timeframe}_{years_back}years.csv"
    
    def get_cache_path(self, symbol: str, timeframe: str) -> Path:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∫—ç—à—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            –ü—É—Ç—å –∫ –∫—ç—à—É
        """
        symbol_file = self.symbol_to_filename(symbol)
        cache_key = f"{symbol_file}_{timeframe}"
        return self.cache_root / f"{cache_key}.pkl"
    
    def _generate_cache_key(self, symbol: str, timeframe: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            –ö–ª—é—á –∫—ç—à–∞
        """
        symbol_file = self.symbol_to_filename(symbol)
        return f"{symbol_file}_{timeframe}"
    
    def is_data_fresh(self, file_path: Path, max_days_old: int = 7) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
            max_days_old: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –¥–Ω—è—Ö
            
        Returns:
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ
        """
        if not file_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        mtime = datetime.fromtimestamp(file_path.stat().st_mtime)
        age = datetime.now() - mtime
        
        return age.days <= max_days_old
    
    def load_data(self, symbol: str, timeframes: List[str]) -> Dict[str, pd.DataFrame]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        """
        self.logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        
        data = {}
        
        for timeframe in timeframes:
            self.logger.info(f"   ‚è∞ –ó–∞–≥—Ä—É–∑–∫–∞ {timeframe}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
            cached_data = self._load_from_cache(symbol, timeframe)
            if cached_data is not None:
                data[timeframe] = cached_data
                self.logger.info(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞: {timeframe}")
                continue
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
            file_data = self._load_from_file(symbol, timeframe)
            if file_data is not None:
                data[timeframe] = file_data
                self._save_to_cache(symbol, timeframe, file_data)
                self.logger.info(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞: {timeframe}")
                continue
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if self.config.data.force_download or not self._file_exists(symbol, timeframe):
                downloaded_data = self._download_data(symbol, timeframe)
                if downloaded_data is not None:
                    data[timeframe] = downloaded_data
                    self._save_to_file(symbol, timeframe, downloaded_data)
                    self._save_to_cache(symbol, timeframe, downloaded_data)
                    self.logger.info(f"   ‚úÖ –°–∫–∞—á–∞–Ω–æ: {timeframe}")
                else:
                    self.logger.error(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {timeframe}")
            else:
                self.logger.error(f"   ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {timeframe}")
        
        if not data:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
        
        self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è {symbol}")
        return data
    
    def _load_from_cache(self, symbol: str, timeframe: str) -> Optional[pd.DataFrame]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        if not self.config.data.cache_data:
            return None
        
        cache_key = self._generate_cache_key(symbol, timeframe)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        if cache_key in self._memory_cache:
            metadata = self._cache_metadata.get(cache_key, {})
            if self._is_cache_valid(metadata):
                return self._memory_cache[cache_key]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–∞ –¥–∏—Å–∫–µ
        cache_path = self.get_cache_path(symbol, timeframe)
        if cache_path.exists():
            try:
                with open(cache_path, 'rb') as f:
                    cached_data = pickle.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞
                if isinstance(cached_data, dict) and 'data' in cached_data:
                    metadata = cached_data.get('metadata', {})
                    if self._is_cache_valid(metadata):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
                        self._memory_cache[cache_key] = cached_data['data']
                        self._cache_metadata[cache_key] = metadata
                        return cached_data['data']
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
        
        return None
    
    def _load_from_file(self, symbol: str, timeframe: str) -> Optional[pd.DataFrame]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
        possible_paths = []
        
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
        possible_paths.append(self.get_data_path(symbol, timeframe))
        
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å years_back
        years_back = self.config.data.years_back
        possible_paths.append(self.get_data_path(symbol, timeframe, f"{years_back}years"))
        
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        possible_paths.append(self.get_data_path(symbol, timeframe, "2years"))
        possible_paths.append(self.get_data_path(symbol, timeframe, "4years"))
        
        for file_path in possible_paths:
            if file_path.exists():
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    df = pd.read_csv(file_path, index_col=0, parse_dates=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å
                    if not self.is_data_fresh(file_path, max_days_old=7):
                        self.logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏: {file_path}")
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    if self.config.data.validate_data:
                        DataValidator.validate_ohlcv_data(df)
                        DataValidator.validate_data_completeness(df)
                    
                    self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
                    return df
                    
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    continue
        
        return None
    
    def _download_data(self, symbol: str, timeframe: str) -> Optional[pd.DataFrame]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        try:
            symbol_normalized = self.normalize_symbol(symbol)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –ø–µ—Ä–∏–æ–¥–æ–º
            years_back = self.config.data.years_back
            df = self.collector.get_data_for_period(symbol_normalized, timeframe, years_back)
            
            if df is not None:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if self.config.data.validate_data:
                    DataValidator.validate_ohlcv_data(df)
                    DataValidator.validate_data_completeness(df)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self._save_to_file(symbol, timeframe, df)
                
                return df
            else:
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} {timeframe}: {e}")
            return None
    
    def _save_to_file(self, symbol: str, timeframe: str, df: pd.DataFrame, period_info: Optional[str] = None):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            period_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–∏–æ–¥–µ
        """
        file_path = self.get_data_path(symbol, timeframe, period_info)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            df.to_csv(file_path)
            self.logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {file_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    def _save_to_cache(self, symbol: str, timeframe: str, df: pd.DataFrame):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        if not self.config.data.cache_data:
            return
        
        cache_key = self._generate_cache_key(symbol, timeframe)
        cache_path = self.get_cache_path(symbol, timeframe)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫—ç—à–∞
            metadata = {
                'created_at': datetime.now().isoformat(),
                'symbol': symbol,
                'timeframe': timeframe,
                'rows': len(df),
                'columns': list(df.columns),
                'data_hash': self._calculate_data_hash(df)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self._memory_cache[cache_key] = df
            self._cache_metadata[cache_key] = metadata
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
            cache_data = {
                'data': df,
                'metadata': metadata
            }
            
            with open(cache_path, 'wb') as f:
                pickle.dump(cache_data, f)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def _is_cache_valid(self, metadata: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
        
        Args:
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫—ç—à–∞
            
        Returns:
            True –µ—Å–ª–∏ –∫—ç—à –≤–∞–ª–∏–¥–µ–Ω
        """
        if not metadata:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        created_at = metadata.get('created_at')
        if created_at:
            try:
                created_time = datetime.fromisoformat(created_at)
                age = datetime.now() - created_time
                if age.total_seconds() > self.config.cache_ttl:
                    return False
            except:
                return False
        
        return True
    
    def _calculate_data_hash(self, df: pd.DataFrame) -> str:
        """
        –†–∞—Å—á–µ—Ç —Ö–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            –•–µ—à –¥–∞–Ω–Ω—ã—Ö
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ö–µ—à–∞
        sample_data = pd.concat([df.head(10), df.tail(10)])
        data_str = sample_data.to_string()
        return hashlib.md5(data_str.encode()).hexdigest()
    
    def _file_exists(self, symbol: str, timeframe: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
        possible_paths = [
            self.get_data_path(symbol, timeframe),
            self.get_data_path(symbol, timeframe, "2years"),
            self.get_data_path(symbol, timeframe, "4years"),
            self.get_data_path(symbol, timeframe, f"{self.config.data.years_back}years")
        ]
        
        return any(path.exists() for path in possible_paths)
    
    def clear_cache(self, symbol: Optional[str] = None):
        """
        –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–µ—Å–ª–∏ None, –æ—á–∏—â–∞–µ—Ç—Å—è –≤–µ—Å—å –∫—ç—à)
        """
        if symbol:
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            for timeframe in self.config.data.timeframes:
                cache_key = self._generate_cache_key(symbol, timeframe)
                if cache_key in self._memory_cache:
                    del self._memory_cache[cache_key]
                if cache_key in self._cache_metadata:
                    del self._cache_metadata[cache_key]
                
                cache_path = self.get_cache_path(symbol, timeframe)
                if cache_path.exists():
                    cache_path.unlink()
            
            self.logger.info(f"üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è {symbol}")
        else:
            # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
            self._memory_cache.clear()
            self._cache_metadata.clear()
            
            for cache_file in self.cache_root.glob("*.pkl"):
                cache_file.unlink()
            
            self.logger.info("üóëÔ∏è –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω")
    
    def get_data_info(self, symbol: str, timeframe: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ None
        """
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
        possible_paths = [
            self.get_data_path(symbol, timeframe),
            self.get_data_path(symbol, timeframe, "2years"),
            self.get_data_path(symbol, timeframe, "4years"),
            self.get_data_path(symbol, timeframe, f"{self.config.data.years_back}years")
        ]
        
        file_path = None
        for path in possible_paths:
            if path.exists():
                file_path = path
                break
        
        if not file_path:
            return None
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            df = pd.read_csv(file_path, index_col=0, parse_dates=True)
            
            info = {
                'symbol': symbol,
                'timeframe': timeframe,
                'file_path': str(file_path),
                'rows': len(df),
                'columns': list(df.columns),
                'date_range': {
                    'start': df.index.min().isoformat(),
                    'end': df.index.max().isoformat()
                },
                'file_size': file_path.stat().st_size,
                'last_modified': datetime.fromtimestamp(file_path.stat().st_mtime).isoformat(),
                'is_fresh': self.is_data_fresh(file_path)
            }
            
            return info
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def get_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        return {
            'data_root': str(self.data_root),
            'cache_root': str(self.cache_root),
            'cache_enabled': self.config.data.cache_data,
            'validation_enabled': self.config.data.validate_data,
            'memory_cache_size': len(self._memory_cache),
            'timeframes': self.config.data.timeframes,
            'years_back': self.config.data.years_back
        } 