#!/usr/bin/env python3
"""
üéØ TargetCreator - —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç

–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–∞—Ä–≥–µ—Ç–æ–≤ –¥–ª—è ML –º–æ–¥–µ–ª–µ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
"""

import pandas as pd
import numpy as np
from typing import Dict, Any, Optional

class TargetCreator:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è ML –º–æ–¥–µ–ª–µ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    """
    
    def __init__(self):
        pass
    
    def create_crypto_clipped_target(self, df: pd.DataFrame, horizon: int, clip_percentile: float = 0.90) -> pd.Series:
        """
        ü•á –ö—Ä–∏–ø—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ - –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–∞—Ä–∞—Ö
            clip_percentile: –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω–∏—è (0.90 = 90% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å)
            
        Returns:
            Series —Å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º —Ç–∞—Ä–≥–µ—Ç–æ–º
        """
        future_price = df['close'].shift(-horizon)
        target = (future_price - df['close']) / df['close']
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∏–ø—Ç—ã (90% –≤–º–µ—Å—Ç–æ 95%)
        lower_bound = target.quantile(1 - clip_percentile)
        upper_bound = target.quantile(clip_percentile)
        clipped_target = np.clip(target, lower_bound, upper_bound)
        
        return pd.Series(clipped_target, index=df.index, name=f'target_crypto_clipped_{horizon}')
    
    def create_volume_weighted_target(self, df: pd.DataFrame, horizon: int, volume_window: int = 20) -> pd.Series:
        """
        ü•à –¢–∞—Ä–≥–µ—Ç —Å —É—á–µ—Ç–æ–º –æ–±—ä–µ–º–∞ - —É—á–∏—Ç—ã–≤–∞–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–∞—Ä–∞—Ö
            volume_window: –û–∫–Ω–æ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞
            
        Returns:
            Series —Å –æ–±—ä–µ–º–Ω–æ-–≤–∑–≤–µ—à–µ–Ω–Ω—ã–º —Ç–∞—Ä–≥–µ—Ç–æ–º
        """
        future_price = df['close'].shift(-horizon)
        price_change = (future_price - df['close']) / df['close']
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±—ä–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
        volume_ma = df['volume'].rolling(window=volume_window).mean()
        volume_ratio = df['volume'] / volume_ma
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–≥–µ—Ç –Ω–∞ –æ–±—ä–µ–º (–±–æ–ª—å—à–µ –æ–±—ä–µ–º = –±–æ–ª—å—à–µ –¥–æ–≤–µ—Ä–∏—è)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        volume_weighted = price_change * np.sqrt(volume_ratio)
        
        return pd.Series(volume_weighted, index=df.index, name=f'target_volume_weighted_{horizon}')
    
    def create_volatility_regime_target(self, df: pd.DataFrame, horizon: int, window: int = 50) -> pd.Series:
        """
        ü•â –¢–∞—Ä–≥–µ—Ç —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–∞—Ä–∞—Ö
            window: –û–∫–Ω–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            
        Returns:
            Series —Å —Ç–∞—Ä–≥–µ—Ç–æ–º, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        """
        future_price = df['close'].shift(-horizon)
        price_change = (future_price - df['close']) / df['close']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        returns = df['close'].pct_change()
        volatility = returns.rolling(window=window).std()
        vol_ma = volatility.rolling(window=window).mean()
        
        # –†–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: 0 (–Ω–∏–∑–∫–∞—è), 1 (—Å—Ä–µ–¥–Ω—è—è), 2 (–≤—ã—Å–æ–∫–∞—è)
        vol_regime = np.where(volatility < vol_ma * 0.7, 0,
                             np.where(volatility > vol_ma * 1.3, 2, 1))
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–≥–µ—Ç –Ω–∞ —Ä–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        # –í –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —É–º–µ–Ω—å—à–∞–µ–º —Ç–∞—Ä–≥–µ—Ç
        regime_adjusted = price_change / (1 + vol_regime * 0.5)
        
        return pd.Series(regime_adjusted, index=df.index, name=f'target_vol_regime_{horizon}')
    
    def create_market_regime_target(self, df: pd.DataFrame, horizon: int, short_window: int = 20, long_window: int = 50) -> pd.Series:
        """
        üéØ –¢–∞—Ä–≥–µ—Ç —Å —É—á–µ—Ç–æ–º —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–±—ã—á–∏–π/–º–µ–¥–≤–µ–∂–∏–π/–±–æ–∫–æ–≤–∏–∫)
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–∞—Ä–∞—Ö
            short_window: –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–∫–Ω–æ –¥–ª—è SMA
            long_window: –î–ª–∏–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è SMA
            
        Returns:
            Series —Å —Ç–∞—Ä–≥–µ—Ç–æ–º, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        """
        future_price = df['close'].shift(-horizon)
        price_change = (future_price - df['close']) / df['close']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        sma_short = df['close'].rolling(window=short_window).mean()
        sma_long = df['close'].rolling(window=long_window).mean()
        
        # –†–µ–∂–∏–º: 1 (–±—ã—á–∏–π), -1 (–º–µ–¥–≤–µ–∂–∏–π), 0 (–±–æ–∫–æ–≤–∏–∫)
        market_regime = np.where(sma_short > sma_long * 1.02, 1,
                                np.where(sma_short < sma_long * 0.98, -1, 0))
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–≥–µ—Ç –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        # –í –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞—Ä–≥–µ—Ç—ã
        regime_adjusted = price_change * (1 + market_regime * 0.3)
        
        return pd.Series(regime_adjusted, index=df.index, name=f'target_market_regime_{horizon}')
    
    def create_crypto_binary_target(self, df: pd.DataFrame, horizon: int, threshold: float = 0.02) -> pd.Series:
        """
        üéØ –ë–∏–Ω–∞—Ä–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –∫—Ä–∏–ø—Ç—ã
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–∞—Ä–∞—Ö
            threshold: –ü–æ—Ä–æ–≥ –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (2% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            
        Returns:
            Series —Å –±–∏–Ω–∞—Ä–Ω—ã–º —Ç–∞—Ä–≥–µ—Ç–æ–º (0 –∏–ª–∏ 1)
        """
        future_price = df['close'].shift(-horizon)
        price_change = (future_price - df['close']) / df['close']
        
        # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –∫—Ä–∏–ø—Ç—ã (2% –≤–º–µ—Å—Ç–æ 1%)
        binary_target = (price_change >= threshold).astype(int)
        
        return pd.Series(binary_target, index=df.index, name=f'target_crypto_binary_{horizon}')
    
    def create_adaptive_threshold_target(self, df: pd.DataFrame, horizon: int, window: int = 100) -> pd.Series:
        """
        üÜï –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–∞—Ä–∞—Ö
            window: –û–∫–Ω–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
            
        Returns:
            Series —Å –±–∏–Ω–∞—Ä–Ω—ã–º —Ç–∞—Ä–≥–µ—Ç–æ–º —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
        """
        future_price = df['close'].shift(-horizon)
        price_change = (future_price - df['close']) / df['close']
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        returns = df['close'].pct_change()
        volatility = returns.rolling(window=window).std()
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥: 1.5 * –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        adaptive_threshold = volatility * 1.5
        
        # –°–æ–∑–¥–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
        binary_target = (price_change >= adaptive_threshold).astype(int)
        
        return pd.Series(binary_target, index=df.index, name=f'target_adaptive_threshold_{horizon}')
    
    def create_momentum_enhanced_target(self, df: pd.DataFrame, horizon: int, momentum_window: int = 20) -> pd.Series:
        """
        üÜï –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç—É–º-—Ç–∞—Ä–≥–µ—Ç —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–∞—Ä–∞—Ö
            momentum_window: –û–∫–Ω–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç—É–º–∞
            
        Returns:
            Series —Å —Ç–∞—Ä–≥–µ—Ç–æ–º, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –º–æ–º–µ–Ω—Ç—É–º
        """
        future_price = df['close'].shift(-horizon)
        price_change = (future_price - df['close']) / df['close']
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–æ–º–µ–Ω—Ç—É–º (—Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥)
        momentum = df['close'].pct_change(momentum_window)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ (R-squared –æ—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏)
        def calculate_trend_strength(prices, window):
            strength = pd.Series(index=prices.index, dtype=float)
            for i in range(window, len(prices)):
                y = prices.iloc[i-window:i+1].values
                x = np.arange(len(y))
                if len(y) > 1:
                    correlation = np.corrcoef(x, y)[0, 1]
                    strength.iloc[i] = correlation ** 2 if not np.isnan(correlation) else 0
            return strength
        
        trend_strength = calculate_trend_strength(df['close'], momentum_window)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–≥–µ—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç—É–º –∏ —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
        momentum_adjusted = price_change * (1 + momentum * trend_strength)
        
        return pd.Series(momentum_adjusted, index=df.index, name=f'target_momentum_enhanced_{horizon}')
    
    def create_volume_volatility_target(self, df: pd.DataFrame, horizon: int, window: int = 20) -> pd.Series:
        """
        üÜï –¢–∞—Ä–≥–µ—Ç —Å —É—á–µ—Ç–æ–º –æ–±—ä–µ–º–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–∞—Ä–∞—Ö
            window: –û–∫–Ω–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            
        Returns:
            Series —Å —Ç–∞—Ä–≥–µ—Ç–æ–º, —É—á–∏—Ç—ã–≤–∞—é—â–∏–º –æ–±—ä–µ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        """
        future_price = df['close'].shift(-horizon)
        price_change = (future_price - df['close']) / df['close']
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±—ä–µ–º
        volume_ma = df['volume'].rolling(window=window).mean()
        volume_ratio = df['volume'] / volume_ma
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        returns = df['close'].pct_change()
        volatility = returns.rolling(window=window).std()
        vol_ma = volatility.rolling(window=window).mean()
        vol_ratio = volatility / vol_ma
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ–±—ä–µ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º + –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        combined_factor = np.sqrt(volume_ratio) / (1 + vol_ratio)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–≥–µ—Ç
        adjusted_target = price_change * combined_factor
        
        return pd.Series(adjusted_target, index=df.index, name=f'target_volume_volatility_{horizon}')
    
    def create_target(self, df: pd.DataFrame, target_type: str, horizon: int, **kwargs) -> pd.Series:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞ –ø–æ —Ç–∏–ø—É
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            target_type: –¢–∏–ø —Ç–∞—Ä–≥–µ—Ç–∞
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            Series —Å —Ç–∞—Ä–≥–µ—Ç–æ–º
        """
        target_methods = {
            'crypto_clipped': self.create_crypto_clipped_target,
            'volume_weighted': self.create_volume_weighted_target,
            'vol_regime': self.create_volatility_regime_target,
            'market_regime': self.create_market_regime_target,
            'crypto_binary': self.create_crypto_binary_target,
            'adaptive_threshold': self.create_adaptive_threshold_target,
            'momentum_enhanced': self.create_momentum_enhanced_target,
            'volume_volatility': self.create_volume_volatility_target
        }
        
        if target_type not in target_methods:
            available = list(target_methods.keys())
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–∞—Ä–≥–µ—Ç–∞: {target_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available}")
        
        return target_methods[target_type](df, horizon, **kwargs)
    
    def create_all_targets(self, df: pd.DataFrame, horizon: int) -> Dict[str, pd.Series]:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∞—Ä–≥–µ—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
        Returns:
            Dict —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∞—Ä–≥–µ—Ç–∞–º–∏
        """
        targets = {}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ-—Ç–∞—Ä–≥–µ—Ç—ã
        targets['crypto_clipped'] = self.create_crypto_clipped_target(df, horizon)
        targets['volume_weighted'] = self.create_volume_weighted_target(df, horizon)
        targets['vol_regime'] = self.create_volatility_regime_target(df, horizon)
        targets['market_regime'] = self.create_market_regime_target(df, horizon)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞—Ä–≥–µ—Ç—ã
        targets['crypto_binary'] = self.create_crypto_binary_target(df, horizon)
        targets['adaptive_threshold'] = self.create_adaptive_threshold_target(df, horizon)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–≥–µ—Ç—ã
        targets['momentum_enhanced'] = self.create_momentum_enhanced_target(df, horizon)
        targets['volume_volatility'] = self.create_volume_volatility_target(df, horizon)
        
        return targets
    
    def get_target_info(self, df: pd.DataFrame, horizon: int) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Ç–∞—Ä–≥–µ—Ç–∞—Ö
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            horizon: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–º —Ç–∞—Ä–≥–µ—Ç–µ
        """
        targets = self.create_all_targets(df, horizon)
        info = {}
        
        for name, target in targets.items():
            if target is not None:
                clean_target = target.dropna()
                
                info[name] = {
                    'count': len(clean_target),
                    'mean': float(clean_target.mean()),
                    'std': float(clean_target.std()),
                    'min': float(clean_target.min()),
                    'max': float(clean_target.max()),
                    'type': 'binary' if clean_target.nunique() <= 2 else 'regression'
                }
                
                if info[name]['type'] == 'binary':
                    info[name]['positive_ratio'] = float(clean_target.mean())
                else:
                    info[name]['quantiles'] = {
                        '1%': float(clean_target.quantile(0.01)),
                        '5%': float(clean_target.quantile(0.05)),
                        '25%': float(clean_target.quantile(0.25)),
                        '50%': float(clean_target.quantile(0.50)),
                        '75%': float(clean_target.quantile(0.75)),
                        '95%': float(clean_target.quantile(0.95)),
                        '99%': float(clean_target.quantile(0.99))
                    }
        
        return info 