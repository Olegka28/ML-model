#!/usr/bin/env python3
"""
üìà Trading Strategy - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
"""

import numpy as np
import pandas as pd
from typing import Dict, Any, Optional, Tuple
from abc import ABC, abstractmethod
from dataclasses import dataclass

@dataclass
class Signal:
    """–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    timestamp: pd.Timestamp
    action: str  # 'buy', 'sell', 'hold'
    price: float
    confidence: float
    prediction: float
    volume: float = 0.0
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None

class TradingStrategy(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self, name: str = "Base Strategy"):
        self.name = name
        self.signals = []
    
    @abstractmethod
    def generate_signal(self, prediction: float, confidence: float, 
                       current_price: float, **kwargs) -> Signal:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        pass
    
    def get_signals(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã"""
        return self.signals

class SimpleThresholdStrategy(TradingStrategy):
    """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    
    def __init__(self, buy_threshold: float = 0.01, sell_threshold: float = -0.01,
                 confidence_threshold: float = 0.5, name: str = "Simple Threshold"):
        super().__init__(name)
        self.buy_threshold = buy_threshold
        self.sell_threshold = sell_threshold
        self.confidence_threshold = confidence_threshold
    
    def generate_signal(self, prediction: float, confidence: float, 
                       current_price: float, timestamp: pd.Timestamp, **kwargs) -> Signal:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if confidence < self.confidence_threshold:
            action = 'hold'
        elif prediction > self.buy_threshold:
            action = 'buy'
        elif prediction < self.sell_threshold:
            action = 'sell'
        else:
            action = 'hold'
        
        signal = Signal(
            timestamp=timestamp,
            action=action,
            price=current_price,
            confidence=confidence,
            prediction=prediction
        )
        
        self.signals.append(signal)
        return signal

class DynamicThresholdStrategy(TradingStrategy):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏"""
    
    def __init__(self, base_threshold: float = 0.01, volatility_multiplier: float = 1.0,
                 confidence_threshold: float = 0.5, name: str = "Dynamic Threshold"):
        super().__init__(name)
        self.base_threshold = base_threshold
        self.volatility_multiplier = volatility_multiplier
        self.confidence_threshold = confidence_threshold
        self.price_history = []
    
    def generate_signal(self, prediction: float, confidence: float, 
                       current_price: float, timestamp: pd.Timestamp, **kwargs) -> Signal:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
        self.price_history.append(current_price)
        if len(self.price_history) > 20:
            self.price_history.pop(0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        if len(self.price_history) > 1:
            returns = np.diff(self.price_history) / self.price_history[:-1]
            volatility = np.std(returns) * np.sqrt(252)  # –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        else:
            volatility = 0.1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        dynamic_threshold = self.base_threshold * (1 + volatility * self.volatility_multiplier)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if confidence < self.confidence_threshold:
            action = 'hold'
        elif prediction > dynamic_threshold:
            action = 'buy'
        elif prediction < -dynamic_threshold:
            action = 'sell'
        else:
            action = 'hold'
        
        signal = Signal(
            timestamp=timestamp,
            action=action,
            price=current_price,
            confidence=confidence,
            prediction=prediction
        )
        
        self.signals.append(signal)
        return signal

class MLConfidenceStrategy(TradingStrategy):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ML –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, min_confidence: float = 0.6, position_size_multiplier: float = 1.0,
                 name: str = "ML Confidence"):
        super().__init__(name)
        self.min_confidence = min_confidence
        self.position_size_multiplier = position_size_multiplier
    
    def generate_signal(self, prediction: float, confidence: float, 
                       current_price: float, timestamp: pd.Timestamp, **kwargs) -> Signal:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if prediction > 0:
            action = 'buy'
        elif prediction < 0:
            action = 'sell'
        else:
            action = 'hold'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if confidence < self.min_confidence:
            action = 'hold'
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        position_size = confidence * self.position_size_multiplier if action != 'hold' else 0
        
        signal = Signal(
            timestamp=timestamp,
            action=action,
            price=current_price,
            confidence=confidence,
            prediction=prediction,
            volume=position_size
        )
        
        self.signals.append(signal)
        return signal

class RiskAdjustedStrategy(TradingStrategy):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"""
    
    def __init__(self, risk_per_trade: float = 0.02, max_position_size: float = 0.1,
                 stop_loss_pct: float = 0.05, take_profit_pct: float = 0.1,
                 name: str = "Risk Adjusted"):
        super().__init__(name)
        self.risk_per_trade = risk_per_trade
        self.max_position_size = max_position_size
        self.stop_loss_pct = stop_loss_pct
        self.take_profit_pct = take_profit_pct
    
    def generate_signal(self, prediction: float, confidence: float, 
                       current_price: float, timestamp: pd.Timestamp, **kwargs) -> Signal:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if prediction > 0.01 and confidence > 0.5:
            action = 'buy'
        elif prediction < -0.01 and confidence > 0.5:
            action = 'sell'
        else:
            action = 'hold'
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
        if action != 'hold':
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = —Ä–∏—Å–∫ / (—Å—Ç–æ–ø-–ª–æ—Å—Å * —Ü–µ–Ω–∞)
            position_size = min(
                self.risk_per_trade / (self.stop_loss_pct * current_price),
                self.max_position_size
            )
        else:
            position_size = 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        stop_loss = None
        take_profit = None
        
        if action == 'buy':
            stop_loss = current_price * (1 - self.stop_loss_pct)
            take_profit = current_price * (1 + self.take_profit_pct)
        elif action == 'sell':
            stop_loss = current_price * (1 + self.stop_loss_pct)
            take_profit = current_price * (1 - self.take_profit_pct)
        
        signal = Signal(
            timestamp=timestamp,
            action=action,
            price=current_price,
            confidence=confidence,
            prediction=prediction,
            volume=position_size,
            stop_loss=stop_loss,
            take_profit=take_profit
        )
        
        self.signals.append(signal)
        return signal

def create_strategy(strategy_type: str, **kwargs) -> TradingStrategy:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    strategies = {
        'simple': SimpleThresholdStrategy,
        'dynamic': DynamicThresholdStrategy,
        'confidence': MLConfidenceStrategy,
        'risk_adjusted': RiskAdjustedStrategy
    }
    
    if strategy_type not in strategies:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_type}")
    
    return strategies[strategy_type](**kwargs) 