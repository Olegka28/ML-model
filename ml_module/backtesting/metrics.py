#!/usr/bin/env python3
"""
üìä Backtest Metrics - –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞

–†–∞—Å—á–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple
from scipy import stats
import warnings

class BacktestMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    
    def __init__(self, risk_free_rate: float = 0.02):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        Args:
            risk_free_rate: –ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–≥–æ–¥–æ–≤–∞—è)
        """
        self.risk_free_rate = risk_free_rate
    
    def calculate_metrics(self, equity_curve: pd.DataFrame, 
                         benchmark_curve: Optional[pd.DataFrame] = None) -> Dict[str, float]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        
        Args:
            equity_curve: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['timestamp', 'equity', 'returns']
            benchmark_curve: DataFrame —Å –±–µ–Ω—á–º–∞—Ä–∫–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        if equity_curve.empty:
            return {}
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = {}
        
        # –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        total_return = self._calculate_total_return(equity_curve)
        metrics['total_return'] = total_return
        
        # –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        annual_return = self._calculate_annual_return(equity_curve)
        metrics['annual_return'] = annual_return
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = self._calculate_volatility(equity_curve)
        metrics['volatility'] = volatility
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞
        sharpe_ratio = self._calculate_sharpe_ratio(equity_curve)
        metrics['sharpe_ratio'] = sharpe_ratio
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        max_drawdown = self._calculate_max_drawdown(equity_curve)
        metrics['max_drawdown'] = max_drawdown
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª—å–º–∞—Ä–∞
        calmar_ratio = self._calculate_calmar_ratio(annual_return, max_drawdown)
        metrics['calmar_ratio'] = calmar_ratio
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ
        sortino_ratio = self._calculate_sortino_ratio(equity_curve)
        metrics['sortino_ratio'] = sortino_ratio
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¢—Ä–µ–π–Ω–æ—Ä–∞
        treynor_ratio = self._calculate_treynor_ratio(equity_curve)
        metrics['treynor_ratio'] = treynor_ratio
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if benchmark_curve is not None:
            information_ratio = self._calculate_information_ratio(equity_curve, benchmark_curve)
            metrics['information_ratio'] = information_ratio
        
        # –ë–µ—Ç–∞ –∏ –ê–ª—å—Ñ–∞
        if benchmark_curve is not None:
            beta = self._calculate_beta(equity_curve, benchmark_curve)
            alpha = self._calculate_alpha(annual_return, beta, benchmark_curve)
            metrics['beta'] = beta
            metrics['alpha'] = alpha
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics['var_95'] = self._calculate_var(equity_curve, 0.95)
        metrics['cvar_95'] = self._calculate_cvar(equity_curve, 0.95)
        metrics['skewness'] = self._calculate_skewness(equity_curve)
        metrics['kurtosis'] = self._calculate_kurtosis(equity_curve)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
        metrics['downside_deviation'] = self._calculate_downside_deviation(equity_curve)
        metrics['gain_loss_ratio'] = self._calculate_gain_loss_ratio(equity_curve)
        
        return metrics
    
    def _calculate_total_return(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
        if len(equity_curve) < 2:
            return 0.0
        
        initial_equity = equity_curve['equity'].iloc[0]
        final_equity = equity_curve['equity'].iloc[-1]
        
        return (final_equity - initial_equity) / initial_equity
    
    def _calculate_annual_return(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≥–æ–¥–æ–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
        if len(equity_curve) < 2:
            return 0.0
        
        total_return = self._calculate_total_return(equity_curve)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
        start_date = equity_curve['timestamp'].iloc[0]
        end_date = equity_curve['timestamp'].iloc[-1]
        years = (end_date - start_date).days / 365.25
        
        if years <= 0:
            return 0.0
        
        return (1 + total_return) ** (1 / years) - 1
    
    def _calculate_volatility(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≥–æ–¥–æ–≤—É—é)"""
        if 'returns' not in equity_curve.columns or len(equity_curve) < 2:
            return 0.0
        
        returns = equity_curve['returns'].dropna()
        if len(returns) == 0:
            return 0.0
        
        # –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        daily_vol = returns.std()
        annual_vol = daily_vol * np.sqrt(252)  # 252 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è
        
        return annual_vol
    
    def _calculate_sharpe_ratio(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞"""
        if 'returns' not in equity_curve.columns or len(equity_curve) < 2:
            return 0.0
        
        returns = equity_curve['returns'].dropna()
        if len(returns) == 0:
            return 0.0
        
        annual_return = self._calculate_annual_return(equity_curve)
        annual_vol = self._calculate_volatility(equity_curve)
        
        if annual_vol == 0:
            return 0.0
        
        # –ì–æ–¥–æ–≤–∞—è –±–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
        daily_rf = (1 + self.risk_free_rate) ** (1 / 252) - 1
        excess_return = annual_return - self.risk_free_rate
        
        return excess_return / annual_vol
    
    def _calculate_max_drawdown(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É"""
        if len(equity_curve) < 2:
            return 0.0
        
        equity = equity_curve['equity'].values
        peak = equity[0]
        max_dd = 0.0
        
        for value in equity:
            if value > peak:
                peak = value
            dd = (peak - value) / peak
            if dd > max_dd:
                max_dd = dd
        
        return max_dd
    
    def _calculate_calmar_ratio(self, annual_return: float, max_drawdown: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª—å–º–∞—Ä–∞"""
        if max_drawdown == 0:
            return 0.0
        
        return annual_return / max_drawdown
    
    def _calculate_sortino_ratio(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ"""
        if 'returns' not in equity_curve.columns or len(equity_curve) < 2:
            return 0.0
        
        returns = equity_curve['returns'].dropna()
        if len(returns) == 0:
            return 0.0
        
        annual_return = self._calculate_annual_return(equity_curve)
        downside_deviation = self._calculate_downside_deviation(equity_curve)
        
        if downside_deviation == 0:
            return 0.0
        
        excess_return = annual_return - self.risk_free_rate
        return excess_return / downside_deviation
    
    def _calculate_treynor_ratio(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¢—Ä–µ–π–Ω–æ—Ä–∞"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –±–µ–Ω—á–º–∞—Ä–∫–∞
        annual_return = self._calculate_annual_return(equity_curve)
        volatility = self._calculate_volatility(equity_curve)
        
        if volatility == 0:
            return 0.0
        
        excess_return = annual_return - self.risk_free_rate
        return excess_return / volatility
    
    def _calculate_information_ratio(self, equity_curve: pd.DataFrame, 
                                   benchmark_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if 'returns' not in equity_curve.columns or 'returns' not in benchmark_curve.columns:
            return 0.0
        
        strategy_returns = equity_curve['returns'].dropna()
        benchmark_returns = benchmark_curve['returns'].dropna()
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        common_index = strategy_returns.index.intersection(benchmark_returns.index)
        if len(common_index) == 0:
            return 0.0
        
        strategy_returns = strategy_returns.loc[common_index]
        benchmark_returns = benchmark_returns.loc[common_index]
        
        excess_returns = strategy_returns - benchmark_returns
        tracking_error = excess_returns.std() * np.sqrt(252)
        
        if tracking_error == 0:
            return 0.0
        
        return excess_returns.mean() * 252 / tracking_error
    
    def _calculate_beta(self, equity_curve: pd.DataFrame, 
                       benchmark_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–µ—Ç–∞"""
        if 'returns' not in equity_curve.columns or 'returns' not in benchmark_curve.columns:
            return 1.0
        
        strategy_returns = equity_curve['returns'].dropna()
        benchmark_returns = benchmark_curve['returns'].dropna()
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        common_index = strategy_returns.index.intersection(benchmark_returns.index)
        if len(common_index) < 2:
            return 1.0
        
        strategy_returns = strategy_returns.loc[common_index]
        benchmark_returns = benchmark_returns.loc[common_index]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—é –∏ –¥–∏—Å–ø–µ—Ä—Å–∏—é
        covariance = np.cov(strategy_returns, benchmark_returns)[0, 1]
        benchmark_variance = np.var(benchmark_returns)
        
        if benchmark_variance == 0:
            return 1.0
        
        return covariance / benchmark_variance
    
    def _calculate_alpha(self, strategy_return: float, beta: float, 
                        benchmark_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–ª—å—Ñ–∞"""
        if 'returns' not in benchmark_curve.columns:
            return 0.0
        
        benchmark_returns = benchmark_curve['returns'].dropna()
        if len(benchmark_returns) == 0:
            return 0.0
        
        benchmark_return = benchmark_returns.mean() * 252
        alpha = strategy_return - (self.risk_free_rate + beta * (benchmark_return - self.risk_free_rate))
        
        return alpha
    
    def _calculate_var(self, equity_curve: pd.DataFrame, confidence: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å Value at Risk"""
        if 'returns' not in equity_curve.columns:
            return 0.0
        
        returns = equity_curve['returns'].dropna()
        if len(returns) == 0:
            return 0.0
        
        return np.percentile(returns, (1 - confidence) * 100)
    
    def _calculate_cvar(self, equity_curve: pd.DataFrame, confidence: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å Conditional Value at Risk (Expected Shortfall)"""
        if 'returns' not in equity_curve.columns:
            return 0.0
        
        returns = equity_curve['returns'].dropna()
        if len(returns) == 0:
            return 0.0
        
        var = self._calculate_var(equity_curve, confidence)
        return returns[returns <= var].mean()
    
    def _calculate_skewness(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞—Å–∏–º–º–µ—Ç—Ä–∏—é"""
        if 'returns' not in equity_curve.columns:
            return 0.0
        
        returns = equity_curve['returns'].dropna()
        if len(returns) == 0:
            return 0.0
        
        return stats.skew(returns)
    
    def _calculate_kurtosis(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç–∫—Å—Ü–µ—Å—Å"""
        if 'returns' not in equity_curve.columns:
            return 0.0
        
        returns = equity_curve['returns'].dropna()
        if len(returns) == 0:
            return 0.0
        
        return stats.kurtosis(returns)
    
    def _calculate_downside_deviation(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å downside deviation"""
        if 'returns' not in equity_curve.columns:
            return 0.0
        
        returns = equity_curve['returns'].dropna()
        if len(returns) == 0:
            return 0.0
        
        # –¢–æ–ª—å–∫–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        downside_returns = returns[returns < 0]
        if len(downside_returns) == 0:
            return 0.0
        
        return downside_returns.std() * np.sqrt(252)
    
    def _calculate_gain_loss_ratio(self, equity_curve: pd.DataFrame) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–æ–≤"""
        if 'returns' not in equity_curve.columns:
            return 0.0
        
        returns = equity_curve['returns'].dropna()
        if len(returns) == 0:
            return 0.0
        
        gains = returns[returns > 0]
        losses = returns[returns < 0]
        
        if len(losses) == 0:
            return float('inf') if len(gains) > 0 else 0.0
        
        avg_gain = gains.mean() if len(gains) > 0 else 0.0
        avg_loss = abs(losses.mean())
        
        return avg_gain / avg_loss if avg_loss != 0 else 0.0
    
    def generate_report(self, metrics: Dict[str, float]) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        report = "üìä –û–¢–ß–ï–¢ –û –ë–ï–ö–¢–ï–°–¢–ò–ù–ì–ï\n"
        report += "=" * 50 + "\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        report += "üí∞ –î–û–•–û–î–ù–û–°–¢–¨:\n"
        report += f"   –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.get('total_return', 0):.2%}\n"
        report += f"   –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.get('annual_return', 0):.2%}\n"
        report += f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {metrics.get('volatility', 0):.2%}\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
        report += "‚ö†Ô∏è –†–ò–°–ö:\n"
        report += f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics.get('max_drawdown', 0):.2%}\n"
        report += f"   VaR (95%): {metrics.get('var_95', 0):.2%}\n"
        report += f"   CVaR (95%): {metrics.get('cvar_95', 0):.2%}\n\n"
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        report += "üìà –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´:\n"
        report += f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {metrics.get('sharpe_ratio', 0):.3f}\n"
        report += f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ: {metrics.get('sortino_ratio', 0):.3f}\n"
        report += f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª—å–º–∞—Ä–∞: {metrics.get('calmar_ratio', 0):.3f}\n"
        report += f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¢—Ä–µ–π–Ω–æ—Ä–∞: {metrics.get('treynor_ratio', 0):.3f}\n\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if 'information_ratio' in metrics:
            report += f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {metrics['information_ratio']:.3f}\n"
        if 'beta' in metrics:
            report += f"   –ë–µ—Ç–∞: {metrics['beta']:.3f}\n"
        if 'alpha' in metrics:
            report += f"   –ê–ª—å—Ñ–∞: {metrics['alpha']:.2%}\n"
        
        report += f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {metrics.get('gain_loss_ratio', 0):.3f}\n"
        report += f"   –ê—Å–∏–º–º–µ—Ç—Ä–∏—è: {metrics.get('skewness', 0):.3f}\n"
        report += f"   –≠–∫—Å—Ü–µ—Å—Å: {metrics.get('kurtosis', 0):.3f}\n"
        
        return report 