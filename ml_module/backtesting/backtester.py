#!/usr/bin/env python3
"""
üîÑ Backtester - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞

–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –º–æ–¥–µ–ª–µ–π.
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple, Any
from pathlib import Path
import json
from datetime import datetime

from ..utils.config import Config
from ..utils.logger import Logger
from .strategy import TradingStrategy, create_strategy
from .portfolio import Portfolio
from .metrics import BacktestMetrics

class Backtester:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    
    def __init__(self, config: Config):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∫—Ç–µ—Å—Ç–µ—Ä–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        """
        self.config = config
        self.logger = Logger('Backtester', level=config.log_level)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        self.strategy = None
        self.portfolio = None
        self.metrics_calculator = BacktestMetrics()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results = {}
        self.equity_curve = pd.DataFrame()
        self.trades_history = []
        
    def setup_backtest(self, 
                      strategy_type: str = 'simple',
                      strategy_params: Optional[Dict] = None,
                      initial_capital: float = 10000.0,
                      commission_rate: float = 0.001,
                      slippage_rate: float = 0.0005,
                      max_position_size: float = 0.2):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        
        Args:
            strategy_type: –¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ('simple', 'dynamic', 'confidence', 'risk_adjusted')
            strategy_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            initial_capital: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
            commission_rate: –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É
            slippage_rate: –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            max_position_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        """
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        if strategy_params is None:
            strategy_params = {}
        
        self.strategy = create_strategy(strategy_type, **strategy_params)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
        self.portfolio = Portfolio(
            initial_capital=initial_capital,
            commission_rate=commission_rate,
            slippage_rate=slippage_rate,
            max_position_size=max_position_size
        )
        
        self.logger.info(f"‚úÖ –ë–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
        self.logger.info(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.strategy.name}")
        self.logger.info(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initial_capital:,.2f}")
        self.logger.info(f"   –ö–æ–º–∏—Å—Å–∏—è: {commission_rate:.3%}")
        self.logger.info(f"   –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {slippage_rate:.3%}")
    
    def run_backtest(self, 
                    data: pd.DataFrame,
                    model,
                    feature_columns: List[str],
                    symbol: str = 'UNKNOWN',
                    start_date: Optional[str] = None,
                    end_date: Optional[str] = None) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        
        Args:
            data: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'close' –∏ feature_columns)
            model: –û–±—É—á–µ–Ω–Ω–∞—è ML –º–æ–¥–µ–ª—å
            feature_columns: –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        """
        if self.strategy is None or self.portfolio is None:
            raise ValueError("–ë–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ setup_backtest()")
        
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è {symbol}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
        if start_date:
            data = data[data.index >= start_date]
        if end_date:
            data = data[data.index <= end_date]
        
        if len(data) == 0:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞")
        
        self.logger.info(f"üìä –ü–µ—Ä–∏–æ–¥: {data.index[0]} - {data.index[-1]}")
        self.logger.info(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤: {len(data)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['close'] + feature_columns
        missing_columns = [col for col in required_columns if col not in data.columns]
        if missing_columns:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        for i, (timestamp, row) in enumerate(data.iterrows()):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                features = row[feature_columns].values.reshape(1, -1)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
                prediction = model.predict(features)[0]
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                confidence = self._calculate_confidence(prediction, model)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                signal = self.strategy.generate_signal(
                    prediction=prediction,
                    confidence=confidence,
                    current_price=row['close'],
                    timestamp=timestamp,
                    symbol=symbol
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
                self.portfolio.update_prices({symbol: row['close']}, timestamp)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
                if signal.action != 'hold':
                    success = self.portfolio.execute_signal(signal, timestamp)
                    if success:
                        self.logger.debug(f"‚úÖ {timestamp}: {signal.action.upper()} {symbol} @ {row['close']:.4f}")
                    else:
                        self.logger.debug(f"‚ùå {timestamp}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {signal.action}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if i % 1000 == 0:
                    equity = self.portfolio.get_total_equity()
                    self.logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(data)} –±–∞—Ä–æ–≤, Equity: ${equity:,.2f}")
            
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –±–∞—Ä–µ {timestamp}: {e}")
                continue
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ
        self._close_all_positions(data.iloc[-1]['close'], data.index[-1])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = self._calculate_results()
        
        self.logger.info("‚úÖ –ë–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return results
    
    def _calculate_confidence(self, prediction: float, model) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å predict_proba –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
        abs_pred = abs(prediction)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]
        confidence = min(abs_pred * 10, 0.95)  # –ú–∞–∫—Å–∏–º—É–º 95%
        
        return confidence
    
    def _close_all_positions(self, final_price: float, timestamp: pd.Timestamp):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if not self.portfolio.positions:
            return
        
        for symbol in list(self.portfolio.positions.keys()):
            commission = self.portfolio.positions[symbol].size * final_price * self.portfolio.commission_rate
            slippage = self.portfolio.positions[symbol].size * final_price * self.portfolio.slippage_rate
            self.portfolio._close_position(symbol, final_price, timestamp, commission, slippage)
    
    def _calculate_results(self) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_stats = self.portfolio.get_statistics()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        equity_curve = self.portfolio.get_equity_curve()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = self.metrics_calculator.calculate_metrics(equity_curve)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'portfolio_stats': portfolio_stats,
            'metrics': metrics,
            'equity_curve': equity_curve,
            'trades': self.portfolio.trades,
            'signals': self.strategy.get_signals(),
            'strategy_name': self.strategy.name,
            'backtest_date': datetime.now().isoformat()
        }
        
        self.results = results
        self.equity_curve = equity_curve
        self.trades_history = self.portfolio.trades
        
        return results
    
    def get_summary_report(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç"""
        if not self.results:
            return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"
        
        portfolio_stats = self.results['portfolio_stats']
        metrics = self.results['metrics']
        
        report = f"üìä –û–¢–ß–ï–¢ –û –ë–ï–ö–¢–ï–°–¢–ò–ù–ì–ï - {self.results['strategy_name']}\n"
        report += "=" * 60 + "\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        report += "üí∞ –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n"
        report += f"   –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${portfolio_stats['initial_capital']:,.2f}\n"
        report += f"   –ö–æ–Ω–µ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${portfolio_stats['total_equity']:,.2f}\n"
        report += f"   –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio_stats['total_return']:.2%}\n"
        report += f"   –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.get('annual_return', 0):.2%}\n\n"
        
        # –¢–æ—Ä–≥–æ–≤–ª—è
        report += "üìà –¢–û–†–ì–û–í–õ–Ø:\n"
        report += f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {portfolio_stats['total_trades']}\n"
        report += f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {portfolio_stats['winning_trades']}\n"
        report += f"   –£–±—ã—Ç–æ—á–Ω—ã—Ö: {portfolio_stats['losing_trades']}\n"
        report += f"   –í–∏–Ω—Ä–µ–π—Ç: {portfolio_stats['win_rate']:.2%}\n\n"
        
        # –†–∏—Å–∫
        report += "‚ö†Ô∏è –†–ò–°–ö:\n"
        report += f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics.get('max_drawdown', 0):.2%}\n"
        report += f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {metrics.get('volatility', 0):.2%}\n"
        report += f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {metrics.get('sharpe_ratio', 0):.3f}\n\n"
        
        # –ö–æ–º–∏—Å—Å–∏–∏
        report += "üí∏ –ö–û–ú–ò–°–°–ò–ò:\n"
        report += f"   –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${portfolio_stats['total_commission']:,.2f}\n"
        report += f"   –û–±—â–µ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: ${portfolio_stats['total_slippage']:,.2f}\n"
        
        return report
    
    def get_detailed_report(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        if not self.results:
            return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"
        
        return self.metrics_calculator.generate_report(self.results['metrics'])
    
    def save_results(self, filepath: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        if not self.results:
            self.logger.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            Path(filepath).parent.mkdir(parents=True, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open(filepath, 'w') as f:
                json.dump(self.results, f, indent=2, default=str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            equity_file = filepath.replace('.json', '_equity.csv')
            self.equity_curve.to_csv(equity_file)
            
            self.logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def load_results(self, filepath: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filepath, 'r') as f:
                self.results = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∏–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            equity_file = filepath.replace('.json', '_equity.csv')
            if Path(equity_file).exists():
                self.equity_curve = pd.read_csv(equity_file, index_col=0, parse_dates=True)
            
            self.logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {filepath}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return False
    
    def compare_strategies(self, strategies: Dict[str, Dict], 
                          data: pd.DataFrame, model, feature_columns: List[str],
                          symbol: str = 'UNKNOWN') -> Dict[str, Any]:
        """
        –°—Ä–∞–≤–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Args:
            strategies: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
            model: ML –º–æ–¥–µ–ª—å
            feature_columns: –ü—Ä–∏–∑–Ω–∞–∫–∏
            symbol: –°–∏–º–≤–æ–ª
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        comparison_results = {}
        
        for strategy_name, strategy_config in strategies.items():
            self.logger.info(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy_name}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            self.setup_backtest(**strategy_config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥
            results = self.run_backtest(data, model, feature_columns, symbol)
            
            comparison_results[strategy_name] = {
                'total_return': results['portfolio_stats']['total_return'],
                'annual_return': results['metrics'].get('annual_return', 0),
                'sharpe_ratio': results['metrics'].get('sharpe_ratio', 0),
                'max_drawdown': results['metrics'].get('max_drawdown', 0),
                'total_trades': results['portfolio_stats']['total_trades'],
                'win_rate': results['portfolio_stats']['win_rate']
            }
        
        return comparison_results 