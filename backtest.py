#!/usr/bin/env python3
"""
üîÑ Backtesting Script - —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python backtest.py --symbol SOL_USDT --strategy simple
    python backtest.py --symbol BTCUSDT --strategy risk_adjusted --capital 50000
"""

import argparse
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

import pandas as pd
from ml_module.utils.config import Config
from ml_module.backtesting import Backtester
from ml_module.core.model_manager import ModelManager
from ml_module.data_collector.data_manager import DataManager
from ml_module.features.feature_manager import FeatureManager

def load_model_and_data(symbol: str, task: str = 'regression'):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ"""
    config = Config()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model_manager = ModelManager(config)
    model, metadata = model_manager.load_model(symbol, task)
    
    if model is None:
        raise ValueError(f"–ú–æ–¥–µ–ª—å –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_manager = DataManager(config)
    data = data_manager.load_data(symbol, ['15m'])
    
    if not data or '15m' not in data:
        raise ValueError(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    feature_manager = FeatureManager(config)
    features = feature_manager.generate_features(data)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df_15m = data['15m']
    combined_data = pd.concat([df_15m, features], axis=1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_columns = [col for col in features.columns if col not in df_15m.columns]
    
    return model, combined_data, feature_columns, metadata

def run_backtest(symbol: str, strategy_type: str = 'simple', 
                initial_capital: float = 10000.0, 
                commission_rate: float = 0.001,
                slippage_rate: float = 0.0005,
                start_date: str = None,
                end_date: str = None,
                save_results: bool = True):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥"""
    
    print(f"üîÑ –ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è {symbol}")
    print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_type}")
    print(f"   –ö–∞–ø–∏—Ç–∞–ª: ${initial_capital:,.2f}")
    print(f"   –ö–æ–º–∏—Å—Å–∏—è: {commission_rate:.3%}")
    print(f"   –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {slippage_rate:.3%}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ
    print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö...")
    model, data, feature_columns, metadata = load_model_and_data(symbol)
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(data)} –±–∞—Ä–æ–≤")
    print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_columns)}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥
    config = Config()
    backtester = Backtester(config)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    strategy_params = {}
    if strategy_type == 'simple':
        strategy_params = {
            'buy_threshold': 0.01,
            'sell_threshold': -0.01,
            'confidence_threshold': 0.5
        }
    elif strategy_type == 'dynamic':
        strategy_params = {
            'base_threshold': 0.01,
            'volatility_multiplier': 1.0,
            'confidence_threshold': 0.5
        }
    elif strategy_type == 'confidence':
        strategy_params = {
            'min_confidence': 0.6,
            'position_size_multiplier': 1.0
        }
    elif strategy_type == 'risk_adjusted':
        strategy_params = {
            'risk_per_trade': 0.02,
            'max_position_size': 0.1,
            'stop_loss_pct': 0.05,
            'take_profit_pct': 0.1
        }
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥
    backtester.setup_backtest(
        strategy_type=strategy_type,
        strategy_params=strategy_params,
        initial_capital=initial_capital,
        commission_rate=commission_rate,
        slippage_rate=slippage_rate
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")
    results = backtester.run_backtest(
        data=data,
        model=model,
        feature_columns=feature_columns,
        symbol=symbol,
        start_date=start_date,
        end_date=end_date
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*60)
    print(backtester.get_summary_report())
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
    print(backtester.get_detailed_report())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if save_results:
        results_file = f"backtest_results/{symbol}_{strategy_type}_backtest.json"
        backtester.save_results(results_file)
    
    return results

def compare_strategies(symbol: str, strategies: dict, 
                      initial_capital: float = 10000.0):
    """–°—Ä–∞–≤–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    print(f"üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è {symbol}")
    print(f"   –ö–∞–ø–∏—Ç–∞–ª: ${initial_capital:,.2f}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ
    print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö...")
    model, data, feature_columns, metadata = load_model_and_data(symbol)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥
    config = Config()
    backtester = Backtester(config)
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    comparison_results = backtester.compare_strategies(
        strategies=strategies,
        data=data,
        model=model,
        feature_columns=feature_columns,
        symbol=symbol
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print("\n" + "="*80)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô")
    print("="*80)
    
    print(f"{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<20} {'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å':<12} {'–ì–æ–¥–æ–≤–∞—è':<10} {'–®–∞—Ä–ø':<8} {'–ú–∞–∫—Å.–î–î':<10} {'–°–¥–µ–ª–∫–∏':<8} {'–í–∏–Ω—Ä–µ–π—Ç':<10}")
    print("-" * 80)
    
    for strategy_name, results in comparison_results.items():
        print(f"{strategy_name:<20} "
              f"{results['total_return']:<11.2%} "
              f"{results['annual_return']:<9.2%} "
              f"{results['sharpe_ratio']:<7.3f} "
              f"{results['max_drawdown']:<9.2%} "
              f"{results['total_trades']:<7} "
              f"{results['win_rate']:<9.2%}")
    
    return comparison_results

def main():
    parser = argparse.ArgumentParser(description='Backtesting ML Trading Strategy')
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--symbol', type=str, required=True, 
                       help='–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOL_USDT)')
    parser.add_argument('--strategy', type=str, default='simple',
                       choices=['simple', 'dynamic', 'confidence', 'risk_adjusted'],
                       help='–¢–∏–ø —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏')
    parser.add_argument('--capital', type=float, default=10000.0,
                       help='–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª')
    parser.add_argument('--commission', type=float, default=0.001,
                       help='–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É (0.001 = 0.1%)')
    parser.add_argument('--slippage', type=float, default=0.0005,
                       help='–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ (0.0005 = 0.05%)')
    
    # –î–∞—Ç—ã
    parser.add_argument('--start-date', type=str, default=None,
                       help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)')
    parser.add_argument('--end-date', type=str, default=None,
                       help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument('--compare', action='store_true',
                       help='–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏')
    parser.add_argument('--no-save', action='store_true',
                       help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
    parser.add_argument('--task', type=str, default='regression',
                       choices=['regression', 'classification'],
                       help='–¢–∏–ø –∑–∞–¥–∞—á–∏ ML –º–æ–¥–µ–ª–∏')
    
    args = parser.parse_args()
    
    try:
        if args.compare:
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            strategies = {
                'Simple': {
                    'strategy_type': 'simple',
                    'initial_capital': args.capital,
                    'commission_rate': args.commission,
                    'slippage_rate': args.slippage
                },
                'Dynamic': {
                    'strategy_type': 'dynamic',
                    'initial_capital': args.capital,
                    'commission_rate': args.commission,
                    'slippage_rate': args.slippage
                },
                'Confidence': {
                    'strategy_type': 'confidence',
                    'initial_capital': args.capital,
                    'commission_rate': args.commission,
                    'slippage_rate': args.slippage
                },
                'Risk Adjusted': {
                    'strategy_type': 'risk_adjusted',
                    'initial_capital': args.capital,
                    'commission_rate': args.commission,
                    'slippage_rate': args.slippage
                }
            }
            
            compare_strategies(args.symbol, strategies, args.capital)
            
        else:
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥
            run_backtest(
                symbol=args.symbol,
                strategy_type=args.strategy,
                initial_capital=args.capital,
                commission_rate=args.commission,
                slippage_rate=args.slippage,
                start_date=args.start_date,
                end_date=args.end_date,
                save_results=not args.no_save
            )
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main() 