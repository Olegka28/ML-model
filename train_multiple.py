#!/usr/bin/env python3
"""
üöÄ Multiple Model Training - –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –º–æ–Ω–µ—Ç

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python train_multiple.py --top 10 --target crypto_clipped
    python train_multiple.py --symbols BTCUSDT,ETHUSDT,SOLUSDT --target crypto_clipped
"""

import argparse
import sys
import time
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from ml_module.utils.config import Config
from ml_module.core.model_manager import ModelManager
from ml_module.data_collector.data_manager import DataManager
from ml_module.features.feature_manager import FeatureManager
from ml_module.systems.regression_system import RegressionSystem

# –¢–æ–ø-20 –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
TOP_COINS = [
    'BTCUSDT',   # Bitcoin
    'ETHUSDT',   # Ethereum
    'BNBUSDT',   # BNB
    'SOLUSDT',   # Solana
    'XRPUSDT',   # XRP
    'ADAUSDT',   # Cardano
    'AVAXUSDT',  # Avalanche
    'DOGEUSDT',  # Dogecoin
    'DOTUSDT',   # Polkadot
    'MATICUSDT', # Polygon
    'LINKUSDT',  # Chainlink
    'UNIUSDT',   # Uniswap
    'ATOMUSDT',  # Cosmos
    'LTCUSDT',   # Litecoin
    'ETCUSDT',   # Ethereum Classic
    'XLMUSDT',   # Stellar
    'BCHUSDT',   # Bitcoin Cash
    'FILUSDT',   # Filecoin
    'TRXUSDT',   # TRON
    'NEARUSDT'   # NEAR Protocol
]

def get_symbols_list(top_n: int = None, symbols: str = None) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    if symbols:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        return [s.strip().upper() for s in symbols.split(',')]
    elif top_n:
        # –ë–µ—Ä–µ–º —Ç–æ–ø-N –º–æ–Ω–µ—Ç
        return TOP_COINS[:top_n]
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ø-10
        return TOP_COINS[:10]

def train_single_model(symbol: str, target: str, config: Config, 
                      max_workers: int = 1) -> dict:
    """–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    start_time = time.time()
    
    try:
        print(f"\nüöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
        system = RegressionSystem(config)
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ run_experiment
        metadata = system.run_experiment(
            symbol=symbol,
            target_type=target
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        model, _ = system.load_model(symbol, 'regression')
        
        if model is None:
            return {
                'symbol': symbol,
                'status': 'failed',
                'error': '–ú–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞',
                'time': time.time() - start_time
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = metadata.get('metrics', {})
        baseline = metadata.get('baseline', {})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é baseline –º–æ–¥–µ–ª—å
        best_baseline = None
        if isinstance(baseline, dict):
            for name, metrics_dict in baseline.items():
                if isinstance(metrics_dict, dict):
                    if best_baseline is None or metrics_dict.get('rmse', float('inf')) < best_baseline[1]:
                        best_baseline = (name, metrics_dict.get('rmse', float('inf')))
        
        return {
            'symbol': symbol,
            'status': 'success',
            'rmse': metrics.get('rmse', 0),
            'mae': metrics.get('mae', 0),
            'r2': metrics.get('r2', 0),
            'best_baseline': best_baseline[0] if best_baseline else 'N/A',
            'baseline_rmse': best_baseline[1] if best_baseline else 0,
            'improvement': ((best_baseline[1] - metrics.get('rmse', 0)) / best_baseline[1] * 100) if best_baseline and best_baseline[1] > 0 else 0,
            'time': time.time() - start_time,
            'model_path': metadata.get('model_path', 'N/A')
        }
        
    except Exception as e:
        return {
            'symbol': symbol,
            'status': 'failed',
            'error': str(e),
            'time': time.time() - start_time
        }

def train_multiple_models(symbols: list, target: str, 
                         max_workers: int = 1, 
                         parallel: bool = False) -> pd.DataFrame:
    """–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç"""
    
    config = Config()
    results = []
    
    print(f"üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è {len(symbols)} –º–æ–Ω–µ—Ç")
    print(f"   –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {target}")
    print(f"   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {'–î–∞' if parallel else '–ù–µ—Ç'}")
    print(f"   –ú–∞–∫—Å–∏–º—É–º –≤–æ—Ä–∫–µ—Ä–æ–≤: {max_workers}")
    
    if parallel and max_workers > 1:
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        print(f"\nüîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
        
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
            future_to_symbol = {
                executor.submit(train_single_model, symbol, target, config, 1): symbol 
                for symbol in symbols
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in as_completed(future_to_symbol):
                symbol = future_to_symbol[future]
                try:
                    result = future.result()
                    results.append(result)
                    
                    if result['status'] == 'success':
                        print(f"‚úÖ {symbol}: RMSE={result['rmse']:.6f}, R¬≤={result['r2']:.3f}, –í—Ä–µ–º—è={result['time']:.1f}—Å")
                    else:
                        print(f"‚ùå {symbol}: {result['error']}")
                        
                except Exception as e:
                    print(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - {e}")
                    results.append({
                        'symbol': symbol,
                        'status': 'failed',
                        'error': str(e),
                        'time': 0
                    })
    else:
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        print(f"\nüîÑ –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
        
        for i, symbol in enumerate(symbols, 1):
            print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(symbols)}")
            
            result = train_single_model(symbol, target, config, max_workers)
            results.append(result)
            
            if result['status'] == 'success':
                print(f"‚úÖ {symbol}: RMSE={result['rmse']:.6f}, R¬≤={result['r2']:.3f}, –í—Ä–µ–º—è={result['time']:.1f}—Å")
            else:
                print(f"‚ùå {symbol}: {result['error']}")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    df_results = pd.DataFrame(results)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ RMSE (–ª—É—á—à–∏–µ –º–æ–¥–µ–ª–∏ –≤–≤–µ—Ä—Ö—É)
    if not df_results.empty and 'rmse' in df_results.columns:
        df_results = df_results.sort_values('rmse')
    
    return df_results

def print_summary_report(df_results: pd.DataFrame):
    """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"""
    
    if df_results.empty:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return
    
    print("\n" + "="*100)
    print("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –û–ë –û–ë–£–ß–ï–ù–ò–ò")
    print("="*100)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_models = len(df_results)
    successful_models = len(df_results[df_results['status'] == 'success'])
    failed_models = total_models - successful_models
    
    print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {total_models}")
    print(f"   –£—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–æ: {successful_models}")
    print(f"   –û—à–∏–±–æ–∫: {failed_models}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful_models/total_models*100:.1f}%")
    
    if successful_models > 0:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ø–µ—à–Ω—ã–º –º–æ–¥–µ–ª—è–º
        successful_df = df_results[df_results['status'] == 'success']
        
        print(f"\nüèÜ –õ–£–ß–®–ò–ï –ú–û–î–ï–õ–ò (–ø–æ RMSE):")
        print(f"{'–ú–æ–Ω–µ—Ç–∞':<12} {'RMSE':<12} {'R¬≤':<8} {'–£–ª—É—á—à–µ–Ω–∏–µ':<12} {'–í—Ä–µ–º—è':<8}")
        print("-" * 60)
        
        for _, row in successful_df.head(5).iterrows():
            print(f"{row['symbol']:<12} {row['rmse']:<11.6f} {row['r2']:<7.3f} "
                  f"{row['improvement']:<11.1f}% {row['time']:<7.1f}—Å")
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–°–ü–ï–®–ù–´–ú –ú–û–î–ï–õ–Ø–ú:")
        print(f"   –°—Ä–µ–¥–Ω–∏–π RMSE: {successful_df['rmse'].mean():.6f}")
        print(f"   –ú–µ–¥–∏–∞–Ω–Ω—ã–π RMSE: {successful_df['rmse'].median():.6f}")
        print(f"   –õ—É—á—à–∏–π RMSE: {successful_df['rmse'].min():.6f}")
        print(f"   –•—É–¥—à–∏–π RMSE: {successful_df['rmse'].max():.6f}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π R¬≤: {successful_df['r2'].mean():.3f}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {successful_df['improvement'].mean():.1f}%")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {successful_df['time'].sum():.1f}—Å")
    
    if failed_models > 0:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
        failed_df = df_results[df_results['status'] == 'failed']
        for _, row in failed_df.iterrows():
            print(f"   {row['symbol']}: {row['error']}")

def save_results(df_results: pd.DataFrame, filename: str = None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    if df_results.empty:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    if filename is None:
        timestamp = pd.Timestamp.now().strftime("%Y%m%d_%H%M%S")
        filename = f"training_results_{timestamp}.csv"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    Path(filename).parent.mkdir(parents=True, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    df_results.to_csv(filename, index=False)
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

def main():
    parser = argparse.ArgumentParser(description='Multiple Model Training')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--top', type=int, 
                      help='–û–±—É—á–∏—Ç—å —Ç–æ–ø-N –º–æ–Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, --top 10)')
    group.add_argument('--symbols', type=str,
                      help='–°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT,ETHUSDT)')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
    parser.add_argument('--target', type=str, default='crypto_clipped',
                       help='–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: crypto_clipped)')
    parser.add_argument('--max-workers', type=int, default=1,
                       help='–ú–∞–∫—Å–∏–º—É–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è Optuna (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)')
    parser.add_argument('--parallel', action='store_true',
                       help='–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π')
    parser.add_argument('--output', type=str, default=None,
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        symbols = get_symbols_list(args.top, args.symbols)
        
        print(f"üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è {len(symbols)} –º–æ–Ω–µ—Ç:")
        for i, symbol in enumerate(symbols, 1):
            print(f"   {i:2d}. {symbol}")
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
        results_df = train_multiple_models(
            symbols=symbols,
            target=args.target,
            max_workers=args.max_workers,
            parallel=args.parallel
        )
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print_summary_report(results_df)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_results(results_df, args.output)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main() 