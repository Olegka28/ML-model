#!/usr/bin/env python3
"""
üîÆ –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π

–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:
- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (RegressionSystem, ClassificationSystem)
"""

import argparse
import sys
import os
sys.path.append('.')

from ml_module.systems.regression_system import RegressionSystem
from ml_module.systems.classification_system import ClassificationSystem
from ml_module.utils.config import Config
import numpy as np

def get_prediction(symbol: str, task: str = 'regression', timeframes: list = None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    
    Args:
        symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
        task: –¢–∏–ø –∑–∞–¥–∞—á–∏ (regression –∏–ª–∏ classification)
        timeframes: –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not symbol or not isinstance(symbol, str):
        print("‚ùå –û—à–∏–±–∫–∞: Symbol –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        return None
    
    if task not in ['regression', 'classification']:
        print("‚ùå –û—à–∏–±–∫–∞: Task –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'regression' –∏–ª–∏ 'classification'")
        return None
    
    print(f"üîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {symbol} ({task})")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = Config(
        models_root='models',
        data_root='data',
        log_level='WARNING'  # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    )
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É (–ò–°–ü–†–ê–í–õ–ï–ù–û)
        if task == 'classification':
            system = ClassificationSystem(config)
            if timeframes is None:
                timeframes = ['15m']
        else:  # regression
            system = RegressionSystem(config)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º RegressionSystem
            if timeframes is None:
                timeframes = ['15m', '1h', '4h']
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º task –ø–∞—Ä–∞–º–µ—Ç—Ä)
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        model, metadata = system.load_model(symbol, task=task)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {metadata.get('model_type', 'unknown')}")
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        data = system.load_and_validate_data(symbol, timeframes)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(data)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        print("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        features = system.generate_and_validate_features(data)
        print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {features.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # 4. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        print("‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        X_pred = features.iloc[[-1]].values
        
        # 5. –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        print("üîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
        if task == 'classification':
            # –î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º predict_latest
            latest_data = data['15m'].tail(100)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π
            prediction_result = system.predict_latest(symbol, latest_data, '15m')
            
            if prediction_result is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return None
            
            pred_value = prediction_result['prediction']
            confidence = prediction_result['confidence']
            prediction_label = prediction_result['prediction_label']
            
        else:
            # –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º predict_latest
            latest_data = data['15m'].tail(100)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π
            prediction_result = system.predict_latest(symbol, latest_data, '15m')
            
            if prediction_result is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
                return None
            
            pred_value = prediction_result['prediction']
            confidence = prediction_result['confidence']
        
        # 6. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "="*50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø")
        print("="*50)
        
        if task == 'classification':
            print(f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {prediction_label}")
            print(f"üî¢ –ö–ª–∞—Å—Å: {pred_value}")
            print(f"üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%")
        else:
            # –†–µ–≥—Ä–µ—Å—Å–∏—è
            print(f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {pred_value:.6f}")
            print(f"üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%")
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if pred_value > 0.01:
                direction = "–†–û–°–¢ üìà"
            elif pred_value < -0.01:
                direction = "–ü–ê–î–ï–ù–ò–ï üìâ"
            else:
                direction = "–ë–û–ö–û–í–ò–ö ‚ÜîÔ∏è"
            
            print(f"üìà –û–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            current_price = data['15m']['close'].iloc[-1]
            expected_change = current_price * pred_value
            print(f"üí∞ –û–∂–∏–¥–∞–µ–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {expected_change:.4f} USDT")
        
        # 7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º saved_at)
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
        print(f"   –°–∏–º–≤–æ–ª: {metadata.get('symbol', 'N/A')}")
        print(f"   –¢–∏–ø: {metadata.get('task', 'N/A')}")
        print(f"   –î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: {metadata.get('saved_at', metadata.get('train_date', 'N/A'))}")
        print(f"   –ì–æ—Ä–∏–∑–æ–Ω—Ç: {metadata.get('horizon', 'N/A')} –±–∞—Ä–æ–≤")
        
        metrics = metadata.get('metrics', {})
        if metrics:
            print(f"   –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏:")
            for metric, value in metrics.items():
                print(f"     {metric.upper()}: {value:.6f}")
        
        # 8. –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        print(f"\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        model_info = system.get_model_info(symbol)
        if model_info:
            print(f"   –¢–∏–ø –º–æ–¥–µ–ª–∏: {model_info.get('model_type', 'N/A')}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {model_info.get('features_count', 'N/A')}")
            print(f"   –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏: {model_info.get('model_score', 0):.4f}")
            
            if task == 'regression':
                print(f"   –¢–∏–ø —Ç–∞—Ä–≥–µ—Ç–∞: {model_info.get('target_type', 'N/A')}")
            else:
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞: {model_info.get('target_percent', 0)*100:.1f}%")
        
        return pred_value
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return None

def compare_models(symbol: str):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–µ–π"""
    print(f"üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol}")
    print("="*50)
    
    # –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    print("\nüìä –†–ï–ì–†–ï–°–°–ò–û–ù–ù–ê–Ø –ú–û–î–ï–õ–¨:")
    reg_pred = get_prediction(symbol, 'regression')
    
    print("\n" + "="*50)
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    print("\nüîÄ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–û–ù–ù–ê–Ø –ú–û–î–ï–õ–¨:")
    cls_pred = get_prediction(symbol, 'classification')
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\n" + "="*50)
    print("üîÑ –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("="*50)
    
    if reg_pred is not None and cls_pred is not None:
        # –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        if isinstance(reg_pred, (int, float)):
            reg_direction = "–†–û–°–¢" if reg_pred > 0 else "–ü–ê–î–ï–ù–ò–ï"
        else:
            reg_direction = "–ù–ï–ò–ó–í–ï–°–¢–ù–û"
        
        # –î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if isinstance(cls_pred, int):
            cls_direction = "–†–û–°–¢" if cls_pred == 1 else "–ü–ê–î–ï–ù–ò–ï"
        else:
            cls_direction = "–ù–ï–ò–ó–í–ï–°–¢–ù–û"
        
        print(f"üìä –†–µ–≥—Ä–µ—Å—Å–∏—è: {reg_pred} ‚Üí {reg_direction}")
        print(f"üîÄ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {cls_pred} ‚Üí {cls_direction}")
        
        if reg_direction == cls_direction and reg_direction != "–ù–ï–ò–ó–í–ï–°–¢–ù–û":
            print("‚úÖ –ú–æ–¥–µ–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã!")
        elif reg_direction != "–ù–ï–ò–ó–í–ï–°–¢–ù–û" and cls_direction != "–ù–ï–ò–ó–í–ï–°–¢–ù–û":
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è –≤–æ –º–Ω–µ–Ω–∏–∏")
        else:
            print("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

def get_model_info(symbol: str, task: str = 'regression'):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
    print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ {symbol} ({task})")
    print("="*50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = Config(
        models_root='models',
        data_root='data',
        log_level='WARNING'
    )
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        if task == 'classification':
            system = ClassificationSystem(config)
        else:
            system = RegressionSystem(config)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = system.get_model_info(symbol)
        if model_info:
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞:")
            print(f"   –°–∏–º–≤–æ–ª: {model_info['symbol']}")
            print(f"   –ó–∞–¥–∞—á–∞: {model_info['task']}")
            print(f"   –¢–∏–ø –º–æ–¥–µ–ª–∏: {model_info['model_type']}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {model_info['features_count']}")
            print(f"   –î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: {model_info['training_date']}")
            
            print(f"\nüìà –ú–µ—Ç—Ä–∏–∫–∏:")
            for metric, value in model_info['metrics'].items():
                print(f"   {metric.upper()}: {value:.6f}")
            
            if task == 'regression':
                print(f"\nüéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–≥–µ—Ç–∞:")
                print(f"   –¢–∏–ø: {model_info['target_type']}")
                print(f"   –ì–æ—Ä–∏–∑–æ–Ω—Ç: {model_info['horizon']}")
            else:
                print(f"\nüéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞: {model_info['target_percent']*100}%")
                print(f"   –ì–æ—Ä–∏–∑–æ–Ω—Ç: {model_info['horizon']}")
            
            print(f"\n‚≠ê –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏: {model_info['model_score']:.4f}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π
            history = system.get_model_history(symbol)
            if history and len(history) > 1:
                print(f"\nüìö –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π:")
                for i, version in enumerate(history[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–µ—Ä—Å–∏–π
                    print(f"   v{version['version']}: {version['score']:.4f}")
        else:
            print(f"‚ùå –ú–æ–¥–µ–ª—å {symbol} ({task}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

def main():
    parser = argparse.ArgumentParser(description='üîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç ML –º–æ–¥–µ–ª–µ–π')
    parser.add_argument('symbol', help='–°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOL_USDT)')
    parser.add_argument('--task', '-t', choices=['regression', 'classification', 'compare', 'info'], 
                       default='regression', help='–¢–∏–ø –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: regression)')
    parser.add_argument('--timeframes', nargs='+', 
                       help='–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 15m,1h,4h –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, 15m –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)')
    
    args = parser.parse_args()
    
    if args.task == 'compare':
        compare_models(args.symbol)
    elif args.task == 'info':
        get_model_info(args.symbol, 'regression')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥—Ä–µ—Å—Å–∏—é
    else:
        get_prediction(args.symbol, args.task, args.timeframes)

if __name__ == "__main__":
    main() 